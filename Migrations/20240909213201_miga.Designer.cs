// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ray2.Data.ContextApp;

#nullable disable

namespace Ray2.Migrations
{
    [DbContext(typeof(RaykContext))]
    [Migration("20240909213201_miga")]
    partial class miga
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ray2.Data.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"));

                    b.Property<string>("Cover_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("artistId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId");

                    b.HasIndex("artistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Ray2.Data.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Ray2.Data.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime?>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("userid");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Ray2.Data.PlayList", b =>
                {
                    b.Property<int>("PlayListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayListId"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("PlayListId");

                    b.HasIndex("userid");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("Ray2.Data.PlayListT_Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("playlistId")
                        .HasColumnType("int");

                    b.Property<int>("trackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("playlistId");

                    b.HasIndex("trackId");

                    b.ToTable("playListT_Tracks");
                });

            modelBuilder.Entity("Ray2.Data.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool?>("Happy")
                        .HasColumnType("bit");

                    b.Property<bool?>("Mahraganat")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Rab")
                        .HasColumnType("bit");

                    b.Property<bool?>("Relaxing")
                        .HasColumnType("bit");

                    b.Property<bool?>("Romantic")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sad")
                        .HasColumnType("bit");

                    b.Property<string>("Track_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Trendy")
                        .HasColumnType("bit");

                    b.Property<int?>("albumId")
                        .HasColumnType("int");

                    b.Property<int?>("artistiD")
                        .HasColumnType("int");

                    b.HasKey("TrackId");

                    b.HasIndex("albumId");

                    b.HasIndex("artistiD");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Ray2.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ray2.Data.Album", b =>
                {
                    b.HasOne("Ray2.Data.Artist", "artist")
                        .WithMany("albums")
                        .HasForeignKey("artistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("artist");
                });

            modelBuilder.Entity("Ray2.Data.Favorite", b =>
                {
                    b.HasOne("Ray2.Data.User", "user")
                        .WithMany("Favorite")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ray2.Data.PlayList", b =>
                {
                    b.HasOne("Ray2.Data.User", "user")
                        .WithMany("PlayList")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ray2.Data.PlayListT_Track", b =>
                {
                    b.HasOne("Ray2.Data.PlayList", "playlist")
                        .WithMany("playtrack")
                        .HasForeignKey("playlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ray2.Data.Track", "track")
                        .WithMany("playtracks")
                        .HasForeignKey("trackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("playlist");

                    b.Navigation("track");
                });

            modelBuilder.Entity("Ray2.Data.Track", b =>
                {
                    b.HasOne("Ray2.Data.Album", "album")
                        .WithMany("track")
                        .HasForeignKey("albumId");

                    b.HasOne("Ray2.Data.Artist", "artist")
                        .WithMany("tracks")
                        .HasForeignKey("artistiD");

                    b.Navigation("album");

                    b.Navigation("artist");
                });

            modelBuilder.Entity("Ray2.Data.Album", b =>
                {
                    b.Navigation("track");
                });

            modelBuilder.Entity("Ray2.Data.Artist", b =>
                {
                    b.Navigation("albums");

                    b.Navigation("tracks");
                });

            modelBuilder.Entity("Ray2.Data.PlayList", b =>
                {
                    b.Navigation("playtrack");
                });

            modelBuilder.Entity("Ray2.Data.Track", b =>
                {
                    b.Navigation("playtracks");
                });

            modelBuilder.Entity("Ray2.Data.User", b =>
                {
                    b.Navigation("Favorite");

                    b.Navigation("PlayList");
                });
#pragma warning restore 612, 618
        }
    }
}
